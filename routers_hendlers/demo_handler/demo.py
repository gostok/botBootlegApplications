import logging
import asyncio

from aiogram.types import InputFile, FSInputFile, Message
from aiogram import Router, F, types
import logging
import os
from mutagen.mp3 import MP3
from mutagen.id3 import ID3, ID3NoHeaderError, ID3NoHeaderError
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command, StateFilter
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from dotenv import load_dotenv

from routers_hendlers.main_menu.menu_kb import *
from routers_hendlers.demo_handler.demo_booking import *
from routers_hendlers.demo_handler.demo_kb import *
from booking.booking import *
from create_bot import bot, ALL_MEDIA_DIR
from database.db import Database


demo_router = Router()

db = Database()

load_dotenv()
chat_admin = os.getenv('CHAT_ADMIN')


@demo_router.message(F.text.startswith("‚§µÔ∏è –ù–∞–∑–∞–¥"))
async def back_demo_menu(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if message.text == "‚§µÔ∏è –ù–∞–∑–∞–¥":
        await message.answer(
            "–¢—ã –≤–µ—Ä–Ω—É–ª—Å—è –Ω–∞–∑–∞–¥", reply_markup=menu_kb(message.from_user.id)
        )
    await state.clear()


# -----------------------------------------------------------------------------------------------------------------------


class DemoStates(StatesGroup):
    name = State()
    text_info = State()
    audio = State()
    cancel = State()


@demo_router.message(F.text.startswith("üåÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–µ–º–æ"))
async def send_demo(message: types.Message, state: FSMContext):
    await state.clear()
    await state.set_state(DemoStates.audio)
    await message.answer(demo_send, reply_markup=back_menu_demo_kb())


@demo_router.message(StateFilter(DemoStates.audio))
async def process_audio_demo(message: types.Message, state: FSMContext):
    if message.content_type == types.ContentType.AUDIO:
        user_id = message.from_user.id
        db.add_user(user_id)
        audio_count = db.get_audio_count(user_id)

        if audio_count >= MAX_AUDIO_FILES:
            await message.answer(
                "–¢—ã –¥–æ—Å—Ç–∏–≥ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª-–≤–∞ –¥–µ–º–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å!",
                reply_markup=menu_kb(user_id),
            )
            await state.clear()
            return

        db.update_audio_count(user_id)
        audio_file_id = message.audio.file_id

        # –°–∫–∞—á–∏–≤–∞–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª
        audio_file = await bot.get_file(audio_file_id)
        audio_path = os.path.join(ALL_MEDIA_DIR, f"{user_id}_{audio_count}_original.mp3")
        await bot.download_file(audio_file.file_path, audio_path)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞
        processing_message = await message.answer("–ò–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–≤–æ–µ–≥–æ –¥–µ–º–æ... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏.")
        await asyncio.sleep(5)

        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Ñ–∞–π–ª –≤ Unknown.mp3 –∏ —É–¥–∞–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        ren_au = os.path.join(ALL_MEDIA_DIR, "Unknown.mp3")
        os.rename(audio_path, ren_au)

        try:
            audio = MP3(ren_au, ID3=ID3)
            audio.delete()  # –£–¥–∞–ª—è–µ–º –≤—Å–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            audio.save()
        except ID3NoHeaderError:
            pass  # –ï—Å–ª–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–µ–º–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db.add_demo(user_id, ren_au)

        # –ü–æ–ª—É—á–∞–µ–º demo_id
        demo_id = db.cursor.lastrowid
        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Ñ–∞–π–ª –≤ Unknown{demo_id}.mp3
        new_ren_au = os.path.join(ALL_MEDIA_DIR, f"Unknown-{demo_id}.mp3")
        os.rename(ren_au, new_ren_au)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª –≤ –≥—Ä—É–ø–ø—É
        audio_input_file = FSInputFile(new_ren_au)
        await bot.send_audio(chat_id=chat_admin, audio=audio_input_file, caption="–ù–æ–≤–∞—è –¥–µ–º–∫–∞:\n\n",
                             reply_markup=admin_kb(user_id=user_id))

        await bot.delete_message(chat_id=message.chat.id, message_id=processing_message.message_id)
        await message.answer("–°–ø–∞—Å–∏–±–æ! –¢–≤–æ—è –¥–µ–º–æ-—Ä–∞–±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
                             reply_markup=menu_kb(user_id))

        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        os.remove(new_ren_au)
        await state.clear()
    else:
        await message.answer("–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ—é –¥–µ–º–æ-—Ä–∞–±–æ—Ç—É!")

# -----------------------------------------------------------------------------------------------------------------------


@demo_router.callback_query(F.data.startswith("accept_audio_file"))
async def accept_audio(callback_query: types.CallbackQuery):
    logging.info(f"Received callback data: {callback_query.data}")  # –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    data_parts = callback_query.data.split("_")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
    if len(data_parts) < 4:  # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 4 —á–∞—Å—Ç–∏
        await callback_query.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
        logging.error("–û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö.")
        return

    user_id_str = data_parts[3]  # –ò–∑–º–µ–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å –Ω–∞ 3

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç —á–∏—Å–ª–æ–º
    if not user_id_str.isdigit():
        await callback_query.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
        logging.error(f"–û—à–∏–±–∫–∞: user_id –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º: {user_id_str}")
        return

    user_id = int(user_id_str)  # user_id –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –¥–µ–º–æ-—Ä–∞–±–æ—Ç—ã
    admin_id = callback_query.from_user.id  # admin_id –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞ (–∫—Ç–æ –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É)

    await callback_query.answer("–î–µ–º–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞.")

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –∏—Å–ø–æ–ª—å–∑—É—è user_id
        logging.info(f"–ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —Å user_id: {user_id} –≤ —á–∞—Ç–µ {callback_query.message.chat.id}")
        user_info = await bot.get_chat_member(chat_id=callback_query.message.chat.id, user_id=user_id)
        username = user_info.user.username if user_info.user.username else f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}"

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await bot.send_message(
            chat_admin,  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä—É
            f"–î–µ–º–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –æ—Ç @{username}!\n–°–≤—è–∂–∏—Å—å —Å –Ω–∏–º –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π."
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ –¥–µ–º–æ
        await bot.send_message(user_id, "–¢–≤–æ—è –¥–µ–º–æ-—Ä–∞–±–æ—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞!\n–°–≤—è–∂–∏—Å—å —Å @gowebgoione.")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {e}")
        await callback_query.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.")


@demo_router.callback_query(F.data.startswith("reject_audio_file"))
async def reject_audio(callback_query: types.CallbackQuery):
    await callback_query.answer()

    if callback_query.message.reply_to_message:
        await callback_query.message.reply_to_message.delete()

    await callback_query.message.answer("–î–µ–º–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
