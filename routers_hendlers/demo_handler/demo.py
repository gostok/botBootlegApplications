import time
import asyncio

import aiogram.exceptions
from aiogram.types import InputFile, FSInputFile, Message
from aiogram import Router, F, types
import logging
import os
import requests
from mutagen.mp3 import MP3
from mutagen.id3 import ID3, ID3NoHeaderError, ID3NoHeaderError
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command, StateFilter
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext

from routers_hendlers.main_menu.menu_kb import *
from routers_hendlers.demo_handler.demo_booking import *
from routers_hendlers.demo_handler.demo_kb import *
from booking.booking import *
from create_bot import bot, ALL_MEDIA_DIR
from database.db import *


demo_router = Router()


@demo_router.message(F.text.startswith("‚§µÔ∏è –ù–∞–∑–∞–¥"))
async def back_demo_menu(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if message.text == "‚§µÔ∏è –ù–∞–∑–∞–¥":
        await message.answer(
            "–¢—ã –≤–µ—Ä–Ω—É–ª—Å—è –Ω–∞–∑–∞–¥", reply_markup=menu_kb(message.from_user.id)
        )
    await state.clear()


# -----------------------------------------------------------------------------------------------------------------------


class DemoStates(StatesGroup):
    name = State()
    text_info = State()
    audio = State()
    cancel = State()


@demo_router.message(F.text.startswith("üåÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–µ–º–æ"))
async def send_demo(message: types.Message, state: FSMContext):
    await state.clear()
    await state.set_state(DemoStates.audio)
    await message.answer(demo_send, reply_markup=back_menu_demo_kb())


@demo_router.message(StateFilter(DemoStates.audio))
async def process_audio_demo(message: types.Message, state: FSMContext):
    if message.content_type == types.ContentType.AUDIO:
        user_id = message.from_user.id

        audio_count = update_audio_count(user_id)

        if audio_count >= MAX_AUDIO_FILES:
            await message.answer(
                "–¢—ã –¥–æ—Å—Ç–∏–≥ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª-–≤–∞ –¥–µ–º–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å!",
                reply_markup=menu_kb(message.from_user.id),
            )
            await state.clear()
            return

        user_audio_count[user_id] = audio_count + 1
        audio_file_id = message.audio.file_id

        # –°–∫–∞—á–∏–≤–∞–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª
        audio_file = await bot.get_file(audio_file_id)
        audio_path = os.path.join(
            ALL_MEDIA_DIR, f"{user_id}_{audio_count}_original.mp3"
        )
        await bot.download_file(audio_file.file_path, audio_path)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        processing_message = await message.answer(
            "–ò–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–≤–æ–µ–≥–æ —Ñ–∞–π–ª–∞... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏."
        )

        await asyncio.sleep(5)

        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Ñ–∞–π–ª –≤ Unknown.mp3
        ren_au = os.path.join(ALL_MEDIA_DIR, "Unknown.mp3")
        os.rename(audio_path, ren_au)

        # –ò–∑–º–µ–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        try:
            audio = MP3(ren_au, ID3=ID3)
            audio.delete()  # –£–¥–∞–ª—è–µ–º –≤—Å–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            audio.save()
        except ID3NoHeaderError:
            pass  # –ï—Å–ª–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
        if not os.path.exists(ren_au):
            await message.answer(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {ren_au}")
            return

        for_admin_text = "–ù–æ–≤–∞—è –¥–µ–º–∫–∞:\n\n"
        await asyncio.sleep(5)

        # –°–æ–∑–¥–∞–µ–º FSInputFile —Å –ø–æ–ª–Ω—ã–º –ø—É—Ç–µ–º
        audio_input_file = FSInputFile(ren_au)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª
        await bot.send_audio(
            chat_id=-1002363283480,
            audio=audio_input_file,
            caption=for_admin_text,
            performer="Unknown",
            reply_markup=admin_kb(),
        )
        await bot.delete_message(
            chat_id=message.chat.id, message_id=processing_message.message_id
        )
        await message.answer(
            "–°–ø–∞—Å–∏–±–æ!\n–¢–≤–æ—è –¥–µ–º–æ-—Ä–∞–±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
            reply_markup=menu_kb(message.from_user.id),
        )

        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        os.remove(ren_au)  # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —Å –ø–æ–ª–Ω—ã–º –ø—É—Ç–µ–º
        await state.clear()

    else:
        await message.answer("–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ—é –¥–µ–º–æ-—Ä–∞–±–æ—Ç—É!")


# -----------------------------------------------------------------------------------------------------------------------


@demo_router.callback_query(F.data.startswith("accept_audio_file"))
async def accept_audio(callback_query: types.CallbackQuery):
    audio_file_id = callback_query.data.split("_")[1]
    await callback_query.answer("–î–µ–º–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞.")

    await bot.send_message(
        callback_query.from_user.id,
        "–¢–≤–æ—è –¥–µ–º–æ-—Ä–∞–±–æ—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞!\n–°–≤—è–∂–∏—Å—å —Å @gowebgoione.",
    )


@demo_router.callback_query(F.data.startswith("reject_audio_file"))
async def reject_audio(callback_query: types.CallbackQuery):
    await callback_query.answer("–î–µ–º–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
